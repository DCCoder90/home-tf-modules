name: Terraform Module Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  find_modules:
    runs-on: ubuntu-latest
    outputs:
      module_dirs: ${{ steps.set_matrix.outputs.module_dirs }}
    env:
      MODULE_PATHS: "."
      IGNORE_DIRS: ".git .github"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Find Terraform Module Directories
        id: set_matrix
        shell: bash
        run: |
          declare -a module_dirs_array
          declare -a ignore_dirs_list

          read -ra ignore_dirs_list <<< "${{ env.IGNORE_DIRS }}"

          echo "Searching for module directories..."

          find . -type d -print0 | while IFS= read -r -d $'\0' dir; do
              # Skip the current directory "." if MODULE_PATHS is not explicitly "." or "*"
              if [[ "$dir" == "." && "${{ env.MODULE_PATHS }}" != "." && "${{ env.MODULE_PATHS }}" != "*" ]]; then
                continue
              fi

              # Check if directory should be ignored
              is_ignored=false
              for ignored_dir in "${ignore_dirs_list[@]}"; do
                  if [[ "$dir" == "./$ignored_dir"* || "$dir" == "$ignored_dir"* ]]; then
                      is_ignored=true
                      break
                  fi
              done
              if [[ "$is_ignored" == true ]]; then
                  continue
              fi

              if ! find "$dir" -maxdepth 1 -name "*.tf" -print -quit | grep -q .; then
                  continue
              fi

              module_path_match=false
              if [[ "${{ env.MODULE_PATHS }}" == "*" ]]; then
                  # If pattern is '*', all non-ignored directories with .tf files are modules
                  module_path_match=true
              elif [[ "${{ env.MODULE_PATHS }}" == *" "* ]]; then
                  read -ra explicit_paths <<< "${{ env.MODULE_PATHS }}"
                  for path in "${explicit_paths[@]}"; do
                      if [[ "$dir" == "$path" ]]; then
                          module_path_match=true
                          break
                      fi
                  done
              else
                  temp_module_paths="${{ env.MODULE_PATHS }}"
                  normalized_dir="${dir#./}"
                  normalized_module_paths="${temp_module_paths#./}"

                  case "$normalized_dir" in
                      "$normalized_module_paths")
                          module_path_match=true
                          ;;
                  esac
              fi

              if [[ "$module_path_match" == true ]]; then
                  module_dirs_array+=("$dir")
              fi
          done

          # Ensure `jq` is installed
          if ! command -v jq &> /dev/null; then
            echo "jq is not installed. Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          if [ ${#module_dirs_array[@]} -eq 0 ]; then
            echo "No Terraform module directories found matching the pattern: ${{ env.MODULE_PATHS }}"
            echo "::error::No Terraform module directories found. Please ensure MODULE_PATHS is correctly configured."
            exit 1
          fi

          IFS=$'\n' sorted_unique_dirs=($(sort -u <<<"${module_dirs_array[*]}"))
          unset IFS
          module_dirs_array=("${sorted_unique_dirs[@]}")

          json_array=$(printf '%s\n' "${module_dirs_array[@]}" | jq -R . | jq -s .)
          echo "Found the following module directories: $json_array"
          echo "module_dirs=$json_array" >> "$GITHUB_OUTPUT"

  validate_each_module:
    needs: find_modules
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module_dir: ${{ fromJson(needs.find_modules.outputs.module_dirs) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest"

      - name: Validate Module ${{ matrix.module_dir }}
        shell: bash
        run: |
          module_dir="${{ matrix.module_dir }}"
          echo "--- Validating module: $module_dir ---"

          if [ ! -d "$module_dir" ]; then
            echo "Error: Directory $module_dir does not exist. This should not happen if 'find_modules' succeeded."
            exit 1
          fi

          pushd "$module_dir" > /dev/null || { echo "Failed to change directory to $module_dir"; exit 1; }

          echo "Running terraform init in $module_dir..."
          if ! terraform init -backend=false -input=false -upgrade; then
            echo "::error file=$module_dir::Terraform init failed for module: $module_dir"
            exit 1
          else
            echo "Running terraform validate in $module_dir..."
            if ! terraform validate; then
              echo "::error file=$module_dir::Terraform validate failed for module: $module_dir"
              exit 1
            fi
          fi

          popd > /dev/null || { echo "Failed to return from directory"; exit 1; }
          echo "Module $module_dir validated successfully!"